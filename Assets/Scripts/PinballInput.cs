//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PinballInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PinballInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PinballInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PinballInput"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""f8f30d0f-c817-4ee1-9b8a-7f5e6bf7a84c"",
            ""actions"": [
                {
                    ""name"": ""Flipper Left"",
                    ""type"": ""Button"",
                    ""id"": ""6cf24b8d-98c9-4291-ba92-dc3d98f8f956"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Flipper Right"",
                    ""type"": ""Button"",
                    ""id"": ""6d20c917-20ab-403d-8ab7-1967fd82ce7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Flipper Top"",
                    ""type"": ""Button"",
                    ""id"": ""b12d37d8-da5f-410d-a3a5-a6e732dad008"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Launch Ball"",
                    ""type"": ""Button"",
                    ""id"": ""d9c7eff8-aa32-4355-821d-06fb379144db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe699d34-513d-4371-af1a-123c7f2eca25"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flipper Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b16dbf4b-19c6-4427-abcc-1e192368cd87"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flipper Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""009b2555-0147-4d41-8d61-238b4d350e9e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flipper Top"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd117d69-cd4e-4030-8d5f-0f0c883cd0ad"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Launch Ball"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_FlipperLeft = m_Default.FindAction("Flipper Left", throwIfNotFound: true);
        m_Default_FlipperRight = m_Default.FindAction("Flipper Right", throwIfNotFound: true);
        m_Default_FlipperTop = m_Default.FindAction("Flipper Top", throwIfNotFound: true);
        m_Default_LaunchBall = m_Default.FindAction("Launch Ball", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private List<IDefaultActions> m_DefaultActionsCallbackInterfaces = new List<IDefaultActions>();
    private readonly InputAction m_Default_FlipperLeft;
    private readonly InputAction m_Default_FlipperRight;
    private readonly InputAction m_Default_FlipperTop;
    private readonly InputAction m_Default_LaunchBall;
    public struct DefaultActions
    {
        private @PinballInput m_Wrapper;
        public DefaultActions(@PinballInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @FlipperLeft => m_Wrapper.m_Default_FlipperLeft;
        public InputAction @FlipperRight => m_Wrapper.m_Default_FlipperRight;
        public InputAction @FlipperTop => m_Wrapper.m_Default_FlipperTop;
        public InputAction @LaunchBall => m_Wrapper.m_Default_LaunchBall;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Add(instance);
            @FlipperLeft.started += instance.OnFlipperLeft;
            @FlipperLeft.performed += instance.OnFlipperLeft;
            @FlipperLeft.canceled += instance.OnFlipperLeft;
            @FlipperRight.started += instance.OnFlipperRight;
            @FlipperRight.performed += instance.OnFlipperRight;
            @FlipperRight.canceled += instance.OnFlipperRight;
            @FlipperTop.started += instance.OnFlipperTop;
            @FlipperTop.performed += instance.OnFlipperTop;
            @FlipperTop.canceled += instance.OnFlipperTop;
            @LaunchBall.started += instance.OnLaunchBall;
            @LaunchBall.performed += instance.OnLaunchBall;
            @LaunchBall.canceled += instance.OnLaunchBall;
        }

        private void UnregisterCallbacks(IDefaultActions instance)
        {
            @FlipperLeft.started -= instance.OnFlipperLeft;
            @FlipperLeft.performed -= instance.OnFlipperLeft;
            @FlipperLeft.canceled -= instance.OnFlipperLeft;
            @FlipperRight.started -= instance.OnFlipperRight;
            @FlipperRight.performed -= instance.OnFlipperRight;
            @FlipperRight.canceled -= instance.OnFlipperRight;
            @FlipperTop.started -= instance.OnFlipperTop;
            @FlipperTop.performed -= instance.OnFlipperTop;
            @FlipperTop.canceled -= instance.OnFlipperTop;
            @LaunchBall.started -= instance.OnLaunchBall;
            @LaunchBall.performed -= instance.OnLaunchBall;
            @LaunchBall.canceled -= instance.OnLaunchBall;
        }

        public void RemoveCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    public interface IDefaultActions
    {
        void OnFlipperLeft(InputAction.CallbackContext context);
        void OnFlipperRight(InputAction.CallbackContext context);
        void OnFlipperTop(InputAction.CallbackContext context);
        void OnLaunchBall(InputAction.CallbackContext context);
    }
}
